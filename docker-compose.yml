# 注意：新版 Docker Compose (v2+) 已弃用 version 声明
services:
  web:
    container_name: dcrm_web
    image: nginx:1.17.6
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - app_static:/usr/share/nginx/html/static
      - app_resources:/usr/share/nginx/html/resources
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/certs:/etc/nginx/certs
    depends_on:
      app:
        condition: service_healthy
      worker-default:
        condition: service_started
      worker-high:
        condition: service_started
    networks:
      - dcrm_network

  pure-ftpd:
    container_name: dcrm_pure-ftpd
    image: stilliard/pure-ftpd:hardened
    restart: always
    ports:
      - "21:21"
      - "30000-30009:30000-30009"
    volumes:
      - app_upload:/home/dcrm
      - ./docker/pure-ftpd/passwd:/etc/pure-ftpd/passwd
    environment:
      PUBLICHOST: localhost
      FTP_USER_NAME: dcrm
      FTP_USER_PASS: dcrm_ftp_password
      FTP_USER_HOME: /home/dcrm
      ADDED_FLAGS: "--passiveportrange 30000 30009"
    depends_on:
      app:
        condition: service_healthy
    networks:
      - dcrm_network

  app:
    container_name: dcrm_app
    build: .
    restart: always
    volumes:
      - app_static:/usr/src/app/static
      - app_resources:/usr/src/app/resources
      - app_upload:/usr/src/app/upload
      - app_temp:/usr/src/app/temp
      - ./.gnupg:/usr/src/app/.gnupg:ro
    environment:
      PYTHONUNBUFFERED: 1
      DCRM_WORKER: none
    env_file:
      - ./DCRM/.env
      - ./docker/DCRM/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dcrm_network

  worker-default:
    container_name: dcrm_worker-default
    build: .
    restart: always
    volumes:
      - app_static:/usr/src/app/static
      - app_resources:/usr/src/app/resources
      - app_upload:/usr/src/app/upload
      - app_temp:/usr/src/app/temp
      - ./.gnupg:/usr/src/app/.gnupg:ro
    environment:
      PYTHONUNBUFFERED: 1
      DCRM_WORKER: default
    env_file:
      - ./DCRM/.env
      - ./docker/DCRM/.env
    depends_on:
      app:
        condition: service_healthy
    networks:
      - dcrm_network

  worker-high:
    build: .
    restart: always
    deploy:
      replicas: 2
    volumes:
      - app_static:/usr/src/app/static
      - app_resources:/usr/src/app/resources
      - app_upload:/usr/src/app/upload
      - app_temp:/usr/src/app/temp
      - ./.gnupg:/usr/src/app/.gnupg:ro
    environment:
      PYTHONUNBUFFERED: 1
      DCRM_WORKER: high
    env_file:
      - ./DCRM/.env
      - ./docker/DCRM/.env
    depends_on:
      app:
        condition: service_healthy
    networks:
      - dcrm_network

  scheduler:
    container_name: dcrm_scheduler
    build: .
    restart: always
    volumes:
      - app_static:/usr/src/app/static
      - app_resources:/usr/src/app/resources
      - app_upload:/usr/src/app/upload
      - app_temp:/usr/src/app/temp
      - ./.gnupg:/usr/src/app/.gnupg:ro
    environment:
      PYTHONUNBUFFERED: 1
      DCRM_WORKER: scheduler
    env_file:
      - ./DCRM/.env
      - ./docker/DCRM/.env
    depends_on:
      app:
        condition: service_healthy
    networks:
      - dcrm_network

  db:
    container_name: dcrm_db
    image: mysql:5.7
    restart: always
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql/conf.d:/etc/mysql/conf.d
    environment:
      MYSQL_ROOT_PASSWORD: dcrm_root_password
      MYSQL_DATABASE: DCRM
      MYSQL_USER: dcrm
      MYSQL_PASSWORD: dcrm_user_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dcrm_network

  redis:
    container_name: dcrm_redis
    image: redis
    restart: always
    networks:
      - dcrm_network

  memcached:
    container_name: dcrm_memcached
    image: memcached
    restart: always
    networks:
      - dcrm_network

volumes:
  db_data:
  app_static:
  app_resources:
  app_upload:
  app_temp:

networks:
  dcrm_network:
    driver: bridge
